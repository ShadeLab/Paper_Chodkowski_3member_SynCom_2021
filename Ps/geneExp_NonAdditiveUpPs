load("/mnt/research/ShadeLab/Chodkowski/JGI_SynCom/RNAseq/Pseudomonas/final_analyses_Rev/lfc/output/PsyringaeLFC_kallisto.RData")

lib <- read.csv(file="/mnt/research/ShadeLab/Chodkowski/JGI_SynCom/RNAseq/Pseudomonas/final_analyses_Rev/initial_files/P-syringae_LIBRARIES.txt", sep="\t",header=TRUE)
counts <- read.csv(file="/mnt/research/ShadeLab/Chodkowski/JGI_SynCom/RNAseq/Pseudomonas/final_analyses_Rev/initial_files/Psraw_counts_kallisoNCBI.txt",sep="\t",header=TRUE)
mapping <- read.csv(file="/mnt/research/ShadeLab/Chodkowski/JGI_SynCom/RNAseq/Pseudomonas/final_analyses_Rev/initial_files/Ps_diffExp_all.csv",header=TRUE,sep=",")

library(DESeq2)
library(ImpulseDE2)

#Obtain only significantly differentially expressed genes
impulse_resultsFull <- readRDS("diffExp/output/impulseDiffGenesFullvsMono_kallisto.rds")
impulse_resultsBt <- readRDS("diffExp/output/impulseDiffGenesPsBtvsMono_kallisto.rds")
impulse_resultsCv <- readRDS("diffExp/output/impulseDiffGenesPsCvvsMono_kallisto.rds")
#Note: you need to load library(ImpulseDE2) before loading impulseRDS object otherwise there's issues with S4 objects.

Fullgenes <- impulse_resultsFull$vecDEGenes
PsBtgenes <- impulse_resultsBt$vecDEGenes
PsCvgenes <- impulse_resultsCv$vecDEGenes

allSigGenes <- c(Fullgenes,PsBtgenes,PsCvgenes)
allSigGenes.final <- unique(allSigGenes)

#If you want to check if these are unique to only the Full community differentially expressed genes
sigGenesFullOnly <- readRDS("/mnt/research/ShadeLab/Chodkowski/JGI_SynCom/RNAseq/Pseudomonas/final_analyses_Rev/diffExp/output/sigGenesFullOnly_Ps_kallisto.rds")

#######Synergistic gene expression#######

lfc_pairwiseCombined_Int <- 2^(lfc_PsBtInt_comparedtoMonoInt.fc) + 2^(lfc_PsCvInt_comparedtoMonoInt.fc)
lfc_pairwiseCombined_25 <- 2^(lfc_PsBt25_comparedtoMono25.fc) + 2^(lfc_PsCv25_comparedtoMono25.fc)
lfc_pairwiseCombined_30 <- 2^(lfc_PsBt30_comparedtoMono30.fc) + 2^(lfc_PsCv30_comparedtoMono30.fc)
lfc_pairwiseCombined_35 <- 2^(lfc_PsBt35_comparedtoMono35.fc) + 2^(lfc_PsCv35_comparedtoMono35.fc)
lfc_pairwiseCombined_40 <- 2^(lfc_PsBt40_comparedtoMono40.fc) + 2^(lfc_PsCv40_comparedtoMono40.fc)
lfc_pairwiseCombined_45 <- 2^(lfc_PsBt45_comparedtoMono45.fc) + 2^(lfc_PsCv45_comparedtoMono45.fc)

lfc_Full_vs_pwCombined_Int <- (2^(lfc_3memInt_comparedtoMonoInt.fc))/lfc_pairwiseCombined_Int
lfc_Full_vs_pwCombined_25 <- (2^(lfc_3mem25_comparedtoMono25.fc))/lfc_pairwiseCombined_25
lfc_Full_vs_pwCombined_30 <- (2^(lfc_3mem30_comparedtoMono30.fc))/lfc_pairwiseCombined_30
lfc_Full_vs_pwCombined_35 <- (2^(lfc_3mem35_comparedtoMono35.fc))/lfc_pairwiseCombined_35
lfc_Full_vs_pwCombined_40 <- (2^(lfc_3mem40_comparedtoMono40.fc))/lfc_pairwiseCombined_40
lfc_Full_vs_pwCombined_45 <- (2^(lfc_3mem45_comparedtoMono45.fc))/lfc_pairwiseCombined_45

#Create side by side for filtering low Full community lfc values.
lfc_Full_synergyInt <- as.data.frame(cbind(lfc_3memInt_comparedtoMonoInt.fc,lfc_Full_vs_pwCombined_Int))
row.names(lfc_Full_synergyInt) <- row.names(lfc_3memInt_comparedtoMonoInt)
#Filter only significant genes
lfc_Full_synergyInt <- lfc_Full_synergyInt[which(row.names(lfc_Full_synergyInt) %in% allSigGenes.final),]

lfc_Full_synergy25 <- as.data.frame(cbind(lfc_3mem25_comparedtoMono25.fc,lfc_Full_vs_pwCombined_25))
row.names(lfc_Full_synergy25) <- row.names(lfc_3mem25_comparedtoMono25)
#Filter only significant genes
lfc_Full_synergy25 <- lfc_Full_synergy25[which(row.names(lfc_Full_synergy25) %in% allSigGenes.final),]

lfc_Full_synergy30 <- as.data.frame(cbind(lfc_3mem30_comparedtoMono30.fc,lfc_Full_vs_pwCombined_30))
row.names(lfc_Full_synergy30) <- row.names(lfc_3mem30_comparedtoMono30)
#Filter only significant genes
lfc_Full_synergy30 <- lfc_Full_synergy30[which(row.names(lfc_Full_synergy30) %in% allSigGenes.final),]

lfc_Full_synergy35 <- as.data.frame(cbind(lfc_3mem35_comparedtoMono35.fc,lfc_Full_vs_pwCombined_35))
row.names(lfc_Full_synergy35) <- row.names(lfc_3mem35_comparedtoMono35)
#Filter only significant genes
lfc_Full_synergy35 <- lfc_Full_synergy35[which(row.names(lfc_Full_synergy35) %in% allSigGenes.final),]

lfc_Full_synergy40 <- as.data.frame(cbind(lfc_3mem40_comparedtoMono40.fc,lfc_Full_vs_pwCombined_40))
row.names(lfc_Full_synergy40) <- row.names(lfc_3mem40_comparedtoMono40)
#Filter only significant genes
lfc_Full_synergy40 <- lfc_Full_synergy40[which(row.names(lfc_Full_synergy40) %in% allSigGenes.final),]

lfc_Full_synergy45 <- as.data.frame(cbind(lfc_3mem45_comparedtoMono45.fc,lfc_Full_vs_pwCombined_45))
row.names(lfc_Full_synergy45) <- row.names(lfc_3mem45_comparedtoMono45)
#Filter only significant genes
lfc_Full_synergy45 <- lfc_Full_synergy45[which(row.names(lfc_Full_synergy45) %in% allSigGenes.final),]

#Filter out low lfc values from dataframe
lfc_Full_synergyInt_filt <- lfc_Full_synergyInt[lfc_Full_synergyInt$lfc_3memInt_comparedtoMonoInt.fc>0,]
lfc_Full_synergy25_filt <- lfc_Full_synergy25[lfc_Full_synergy25$lfc_3mem25_comparedtoMono25.fc>0,]
lfc_Full_synergy30_filt <- lfc_Full_synergy30[lfc_Full_synergy30$lfc_3mem30_comparedtoMono30.fc>0,]
lfc_Full_synergy35_filt <- lfc_Full_synergy35[lfc_Full_synergy35$lfc_3mem35_comparedtoMono35.fc>0,]
lfc_Full_synergy40_filt <- lfc_Full_synergy40[lfc_Full_synergy40$lfc_3mem40_comparedtoMono40.fc>0,]
lfc_Full_synergy45_filt <- lfc_Full_synergy45[lfc_Full_synergy45$lfc_3mem45_comparedtoMono45.fc>0,]

#Filter lfc >1.5 comparing Full community to additive pairwise communities
lfc_Full_synergyInt_final <- lfc_Full_synergyInt_filt[lfc_Full_synergyInt_filt$lfc_Full_vs_pwCombined_Int>1.2,]
lfc_Full_synergy25_final <- lfc_Full_synergy25_filt[lfc_Full_synergy25_filt$lfc_Full_vs_pwCombined_25>1.2,]
lfc_Full_synergy30_final <- lfc_Full_synergy30_filt[lfc_Full_synergy30_filt$lfc_Full_vs_pwCombined_30>1.2,]
lfc_Full_synergy35_final <- lfc_Full_synergy35_filt[lfc_Full_synergy35_filt$lfc_Full_vs_pwCombined_35>1.2,]
lfc_Full_synergy40_final <- lfc_Full_synergy40_filt[lfc_Full_synergy40_filt$lfc_Full_vs_pwCombined_40>1.2,]
lfc_Full_synergy45_final <- lfc_Full_synergy45_filt[lfc_Full_synergy45_filt$lfc_Full_vs_pwCombined_45>1.2,]

#Put all locus tags together
genes_syn <- c(as.character(row.names(lfc_Full_synergyInt_final)),as.character(row.names(lfc_Full_synergy25_final)),
           as.character(row.names(lfc_Full_synergy30_final)),as.character(row.names(lfc_Full_synergy35_final)),
           as.character(row.names(lfc_Full_synergy40_final)),as.character(row.names(lfc_Full_synergy45_final)))

#Check for the amount of unique elements
synergyGenes <- as.data.frame(unique(genes_syn))

write.csv(synergyGenes,"synergyGenes_Ps_kallisto.csv")

#Make Venn with SP time points
library(VennDiagram)

venn.plot <- venn.diagram(x = list("25h" =row.names(lfc_Full_synergy25_final), "30h" =row.names(lfc_Full_synergy30_final),
                          "35h"=row.names(lfc_Full_synergy35_final), "40h"=row.names(lfc_Full_synergy40_final), "45h" =row.names(lfc_Full_synergy45_final)),
filename = "PsNonAdditiveUpVenn.tiff",
    height = 3000, width = 3000, resolution = 300,
    fill = NULL,
    col = rep("black",5),
    cex = 2.0,
    fontfamily = "serif",
    cat.cex = 2.0,
    cat.just=list(c(0.5,0.75), c(-0.35,-2.5) , c(0.75,-0.25) , c(0,-0.5) , c(0.95,-1)),
    cat.fontfamily = "serif")

#Make Venn with SP vs Int TP

genes_synSP <- unique(c(as.character(row.names(lfc_Full_synergy25_final)),
           as.character(row.names(lfc_Full_synergy30_final)),as.character(row.names(lfc_Full_synergy35_final)),
           as.character(row.names(lfc_Full_synergy40_final)),as.character(row.names(lfc_Full_synergy45_final))))

venn.plot <- venn.diagram(x = list("EP" =row.names(lfc_Full_synergyInt_final), "SP" =genes_synSP),
filename = "PsNonAdditiveUpVenn_ExPvSP.tiff",
    height = 3000, width = 3000, resolution = 300,
    fill = NULL,
    col = rep("black",2),
    cex = 2.0,
    fontfamily = "serif",
    cat.cex = 2.0,
    cat.fontfamily = "serif")


#Prepare list for figure.
Full_synergistic <- c(nrow(lfc_Full_synergyInt_final),nrow(lfc_Full_synergy25_final),nrow(lfc_Full_synergy30_final),
                      nrow(lfc_Full_synergy35_final),nrow(lfc_Full_synergy40_final),nrow(lfc_Full_synergy45_final))


#Prepare list for figure.
Full_synergistic <- c(nrow(lfc_Full_synergyInt_final),nrow(lfc_Full_synergy25_final),nrow(lfc_Full_synergy30_final),
                      nrow(lfc_Full_synergy35_final),nrow(lfc_Full_synergy40_final),nrow(lfc_Full_synergy45_final))


#List for syn and antag categories
FinalGeneTrends_f <- data.frame(condition=rep(c("Non-additive Up"), each=6),
                time=rep(c("12.5", "25", "30", "35", "40", "45")),
                Genes=c(Full_synergistic))

library(ggplot2)
FinalGeneTrends_f$trend <- factor(FinalGeneTrends_f$time,levels = c("12.5", "25", "30", "35", "40", "45"),ordered = TRUE)

saveRDS(FinalGeneTrends_f,"FinalGeneTrends_SyngeristicOnly_kallisto.rds")

library(ggplot2)

FinalGeneTrends_f <- readRDS("FinalGeneTrends_SyngeristicOnly_kallisto.rds")

p2 <- ggplot(data=FinalGeneTrends_f, aes(x=time,.desc =TRUE, y=Genes, fill=condition)) +
geom_bar(stat="identity", color="black", position='dodge') + ylim(0,70) +
        labs(y="# of genes with non-additive expression", x = "Time (h)") +
        scale_fill_manual(values=c("black"))+
        theme(legend.position ="none", legend.key.size = unit(2, 'mm'),
        legend.title = element_blank(),
        legend.text = element_text(size=3),
        axis.text = element_text(size=6),
        axis.title = element_text(size=8))

ggsave("Ps_nonAdditiveUp_trends.eps",plot=p2,device="eps",width=8,height=8, units="cm",dpi=300)

#Obtain most consistent non-additive up

write.csv(row.names(lfc_Full_synergyInt_final[order(lfc_Full_synergyInt_final$lfc_Full_vs_pwCombined_Int),]), "PsNonAdditiveUp_Int.csv")
write.csv(row.names(lfc_Full_synergy25_final[order(lfc_Full_synergy25_final$lfc_Full_vs_pwCombined_25),]), "PsNonAdditiveUp_25.csv")
write.csv(row.names(lfc_Full_synergy30_final[order(lfc_Full_synergy30_final$lfc_Full_vs_pwCombined_30),]), "PsNonAdditiveUp_30.csv")
write.csv(row.names(lfc_Full_synergy35_final[order(lfc_Full_synergy35_final$lfc_Full_vs_pwCombined_35),]), "PsNonAdditiveUp_35.csv")
write.csv(row.names(lfc_Full_synergy40_final[order(lfc_Full_synergy40_final$lfc_Full_vs_pwCombined_40),]), "PsNonAdditiveUp_40.csv")
write.csv(row.names(lfc_Full_synergy45_final[order(lfc_Full_synergy45_final$lfc_Full_vs_pwCombined_45),]), "PsNonAdditiveUp_45.csv")
