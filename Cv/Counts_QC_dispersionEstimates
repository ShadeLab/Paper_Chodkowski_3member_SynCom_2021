```

###Package Info###

R version 3.5.0 (2018-04-23)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS: /opt/software/R/3.5.0-iomkl-2018a-X11-20180131/lib64/R/lib/libR.so
LAPACK: /opt/software/R/3.5.0-iomkl-2018a-X11-20180131/lib64/R/modules/lapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets
[8] methods   base

other attached packages:
 [1] stringr_1.3.1               DESeq2_1.22.1
 [3] SummarizedExperiment_1.12.0 DelayedArray_0.8.0
 [5] BiocParallel_1.16.1         matrixStats_0.54.0
 [7] Biobase_2.42.0              GenomicRanges_1.34.0
 [9] GenomeInfoDb_1.18.1         IRanges_2.16.0
[11] S4Vectors_0.20.1            BiocGenerics_0.28.0

loaded via a namespace (and not attached):
 [1] bit64_0.9-7            splines_3.5.0          Formula_1.2-3
 [4] assertthat_0.2.0       latticeExtra_0.6-28    blob_1.1.1
 [7] GenomeInfoDbData_1.2.0 pillar_1.3.0           RSQLite_2.1.1
[10] backports_1.1.2        lattice_0.20-35        glue_1.3.0
[13] digest_0.6.18          RColorBrewer_1.1-2     XVector_0.22.0
[16] checkmate_1.8.5        colorspace_1.3-2       htmltools_0.3.6
[19] Matrix_1.2-14          plyr_1.8.4             XML_3.98-1.16
[22] pkgconfig_2.0.2        genefilter_1.64.0      zlibbioc_1.28.0
[25] purrr_0.2.5            xtable_1.8-3           scales_1.0.0
[28] htmlTable_1.12         tibble_1.4.2           annotate_1.60.0
[31] ggplot2_3.1.0          nnet_7.3-12            lazyeval_0.2.1
[34] survival_2.42-3        magrittr_1.5           crayon_1.3.4
[37] memoise_1.1.0          foreign_0.8-70         tools_3.5.0
[40] data.table_1.11.8      locfit_1.5-9.1         munsell_0.5.0
[43] cluster_2.0.7-1        AnnotationDbi_1.44.0   bindrcpp_0.2.2
[46] compiler_3.5.0         rlang_0.3.0.1          grid_3.5.0
[49] RCurl_1.95-4.11        rstudioapi_0.8         htmlwidgets_1.3
[52] bitops_1.0-6           base64enc_0.1-3        gtable_0.2.0
[55] DBI_1.0.0              R6_2.3.0               gridExtra_2.3
[58] knitr_1.20             dplyr_0.7.8            bit_1.1-14
[61] bindr_0.1.1            Hmisc_4.1-1            stringi_1.2.4
[64] Rcpp_1.0.0             geneplotter_1.60.0     rpart_4.1-13
[67] acepack_1.4.1          tidyselect_0.2.5


library(DESeq2)
#Load meta data and count matrix
lib <- read.csv(file="initial_files/Cviolaceum_LIBRARIES.txt", sep="\t",header=TRUE)
counts <- read.csv(file="initial_files/Cvraw_counts_kallisoNCBI.txt",sep="\t",header=TRUE)

#Remove rRNA, tRNA, and miscRNA
library(rtracklayer)
#gff <- readGFF("2724679652.gff") #for JGI
gff <- readGFF("initial_files/Cviolaceum_genomic.gff") #for NCBI
CDS <- gff[gff$type=="CDS",]

#For NCBI
library(tidyr)
library(dplyr)
countsS <- counts %>% separate(target_id, c("gene","Locus"),1, sep = "-",remove=TRUE)
countsS <- select(countsS,-c(gene))
countsF <- countsS[which(countsS$Locus %in% CDS$locus_tag),] #For NCBI

#remove non-numerical columns from count matrix
genecounts <- countsF[2:ncol(countsF)]
row.names(genecounts) <- countsF[,1]

#Convert numeric to integers
genecounts[1:ncol(genecounts)] <- lapply(genecounts[1:ncol(genecounts)],as.integer)

#Replace NA values with 0s
genecounts[is.na(genecounts)] <- 0

#Remove 0 count genes
genesZeroC <- rownames(genecounts)[which(rowSums(genecounts) == 0)]
genesRemove <- c(genesZeroC)

#Extract unique identifiers from each condition
lib$libraryName = as.character(lib$libraryName)
genecounts.sort=genecounts[,match(lib$libraryName, names(genecounts))]
library(stringr)
Extract <- c("3mem","Bt","Ps","mono")
keywords <- str_extract(lib$sampleName, paste(Extract,collapse="|"))

#Load mapping file
mapping <- read.csv(file="initial_files/Cv_diffExp_all.csv",header=TRUE,sep=",")

all <- which(keywords %in% c("3mem","Bt","Ps","mono"))
samps <- as.vector(lib$sampleName[all])
samples <- match(samps,lib$sampleName)
geneMat <- genecounts.sort[,samples]
genemat <- as.data.frame(geneMat)
align <- as.vector(mapping[,1])


#Align sample names between objects
diffGenes =geneMat[,match(align, colnames(geneMat))]
colnames(diffGenes) <- mapping$Code
rownames(diffGenes) <- rownames(genecounts.sort)

#Remove genes of interest- 0 genes to remove. Skip this or else matrix becomes empty.
#diffGenes = diffGenes[-c(which(rownames(diffGenes) %in% genesRemove)),]
#4371 > 4371 genes

#Now, let's remove genes with less than 10 counts in 90% of the samples- 91 samples so 82 is ~90% of samples

idx <- rowSums(diffGenes >= 10 ) >= 82


diffGenesF <- diffGenes[idx,]
#4371 > 4019 genes

#Prepare files for DESEq analysis
mapping$time <- as.factor(as.numeric(as.character(mapping$time)))
ddsMat <- DESeqDataSetFromMatrix(countData = diffGenesF, colData=mapping, design= ~class + time + class:time)
ddsMat$class <- relevel(ddsMat$class, ref = "con")
ddsMat$time <- factor(ddsMat$time, levels=c("750","1500","1800","2100","2400","2700"))
ddsMat <- DESeq(ddsMat, test="LRT", reduced = ~ time)


#Extract dispersion and size factor estimates
mcols(ddsMat,use.names=TRUE)[1:4,]

#And finally, the values we want
dispersions_deseq <- 1/(mcols(ddsMat)$dispersion)
sizeEst_deseq <- sizeFactors(ddsMat)

#Save these as objects
saveRDS(dispersions_deseq, "dispersions_deseq_KallistoNCBI.rds")
saveRDS(sizeEst_deseq, "sizeEst_deseq_KallistoNCBI.rds")
saveRDS(diffGenesF,"diffGenesF_KallistoNCBI.rds")
saveRDS(ddsMat,"Deseq2Results_KallistoNCBI.rds")

#Write QC-filtered, normalized matrix
normCounts <- counts(ddsMat, normalized=TRUE)
write.csv(normCounts,"Cv_QCFiltered_normalizedCountMatrix_kallistoNCBI.csv")

#Obtained sizeFactors and dispersion estimates. Ready for input into ImpulseDE2

```
